[["version", 4], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `context-menu` module lets you add items to Firefox's page context menu.\n\n\nIntroduction\n------------\n\nThe `context-menu` API provides a simple, declarative way to add items to the\npage's context menu.  You can add items that perform an action when clicked,\nsubmenus, and menu separators.\n\nInstead of manually adding items when particular contexts occur and then\nremoving them when those contexts go away, you *bind* items to contexts, and the\nadding and removing is automatically handled for you.\n\nItems are bound to contexts in much the same way that event listeners are bound\nto events.  When the user invokes the context menu, all of the items bound to\nthe current context are automatically added to the menu.  If no items are bound,\nnone are added.  Likewise, any items that were previously in the menu but are\nnot bound to the current context are automatically removed from the menu.  You\nnever need to manually remove your items from the menu unless you want them to\nnever appear again.\n\nFor example, if your extension needs to add a context menu item whenever the\nuser visits a certain page, don't create the item when that page loads, and\ndon't remove it when the page unloads.  Rather, create your item only once, when\nyour program starts, and supply a context that matches the target URL.\n\n\nSpecifying Contexts\n-------------------\n\nAs its name implies, the context menu should be reserved for the occurrence of\nspecific contexts.  Contexts can be related to page content or the page itself,\nbut they should never be external to the page.\n\nFor example, a good use of the menu would be to show an \"Edit Image\" item when\nthe user right-clicks an image in the page.  A bad use would be to show a\nsubmenu that listed all the user's tabs, since tabs aren't related to the page\nor the node the user clicked to open the menu.\n\n### The Page Context\n\nFirst of all, you may not need to specify a context at all.  When an item does\nnot specify a context, the *page context* applies.  The page context occurs\nwhen the user invokes the context menu on a non-interactive portion of the page.\n\nTry right-clicking a blank spot in a page, or on text.  Make sure that no text\nis selected.  The menu that appears should contain the items \"Back\", \"Forward\",\n\"Reload\", \"Stop\", and so on.  This is the page context.\n\nThe page context is appropriate when your item acts on the page as a whole.  It\ndoes not occur when the user invokes the context menu on a link, image, or other\nnon-text node, or while a selection exists.\n\n### Declarative Contexts\n\nYou can specify some simple, declarative contexts when you construct a menu\nitem by setting the `context` property of the options object passed to its\nconstructor.  Such contexts may be specified with instances of any of the\nfollowing types.  Each is a constructor exported by the `context-menu` module.\n\n<table>\n  <tr>\n    <td><code>\n      PageContext()\n    </code></td>\n    <td>\n      The page context.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      SelectionContext()\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on a page that contains a\n      selection.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      SelectorContext(selector)\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on a node that either matches\n      <code>selector</code>, a CSS selector,  or has an ancestor that matches.\n      <code>selector</code> may include multiple selectors separated by commas,\n      e.g., <code>\"a[href], img\"</code>.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      URLContext(matchPattern)\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on pages with particular\n      URLs.  <code>matchPattern</code> is a match pattern string or an array of\n      match pattern strings.  When <code>matchPattern</code> is an array, the\n      context occurs when the menu is invoked on a page whose URL matches any of\n      the patterns.  These are the same match pattern strings that you use with\n      the <a href=\"packages/addon-kit/docs/page-mod.html\"><code>page-mod</code></a>\n      <code>include</code> property.\n      <a href=\"packages/api-utils/docs/match-pattern.html\">Read more about patterns</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      array\n    </td>\n    <td>\n      An array of any of the other types.  This context occurs when all contexts\n      in the array occur.\n    </td>\n  </tr>\n</table>\n\nMenu items also have a `context` property that can be used to add and remove\ndeclarative contexts after construction.  For example:\n\n    var context = contextMenu.SelectorContext(\"img\");\n    myMenuItem.context.add(context);\n    myMenuItem.context.remove(context);\n\nWhen a menu item is bound to more than one context, it appears in the menu when\nall of those contexts occur.\n\n### In Content Scripts\n\nTo interact with pages in the browser, you create content scripts and pass them\nwhen constructing menu items.  Only items in the top-level context menu can have\ncontent scripts.\n\nOne of the things you can do in a content script is listen for an event named\n`\"context\"`.  This event is fired whenever the context menu is about to be\nshown.  If your listener returns true, the menu item associated with the content\nscript is shown in the menu.\n\nFor example, this is an item that appears whenever the context menu is invoked\non a page whose URL contains \"mozilla\" as a substring:\n\n    var myItem = contextMenu.Item({\n      label: \"My Mozilla Item\",\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  return /mozilla/.test(document.URL);' +\n                     '});'\n    });\n\nNote that the listener function has a parameter called `node`.  This is the node\nin the page that the user context-clicked to invoke the menu.  You can use it to\ndetermine whether your item should be shown.\n\nYou can both specify declarative contexts and listen for contexts in a content\nscript.  In that case, the declarative contexts are evaluated first.  If they\nare not current, then your context listener is never called.\n\nThis example takes advantage of that fact.  The listener can be assured that\n`node` will always be an image:\n\n    var myItem = contextMenu.Item({\n      label: \"My Mozilla Image Item\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  return /mozilla/.test(node.src);' +\n                     '});'\n    });\n\nYour item is shown only when all declarative contexts are current and your\ncontext listener returns true.\n\n\nHandling Menu Item Clicks\n-------------------------\n\nIn addition to using content scripts to listen for the `\"context\"` event as\ndescribed above, you use content scripts to handle item clicks.  When the user\nclicks your menu item, an event named `\"click\"` is dispatched to the item's\ncontent script.\n\nTherefore, to handle an item click, listen for the `\"click\"` event in that\nitem's content script like so:\n\n    var myItem = contextMenu.Item({\n      label: \"My Item\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  console.log(\"Item clicked!\");' +\n                     '});'\n    });\n\nNote that the listener function has parameters called `node` and `data`.  `node`\nis the node that the user context-clicked to invoke the menu.  You can use it\nwhen performing some action.  `data` is the `data` property of the menu item\nthat was clicked.  Since only top-level menu items have content scripts, this\ncomes in handy for `Menu`s with sub-items.  For example:\n\n    var myMenu = contextMenu.Menu({\n      label: \"My Menu\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  console.log(\"You clicked \" + data);' +\n                     '});',\n      items: [\n        contextMenu.Item({ label: \"Item 1\", data: \"item1\" }),\n        contextMenu.Item({ label: \"Item 2\", data: \"item2\" }),\n        contextMenu.Item({ label: \"Item 3\", data: \"item3\" })\n      ]\n    });\n\nOften you will need to collect some kind of information in the click listener\nand perform an action unrelated to content.  To communicate to the menu item\nassociated with the content script, the content script can call the\n`postMessage` function attached to the global `self` object, passing it some\nJSON-able data.  The menu item's `onMessage` function will be called with that\ndata.\n\n    var myItem = contextMenu.Item({\n      label: \"Edit Image\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\n\n\nExamples\n--------\n\nEach of these examples can be added to the top-level scope of your program; you\nonly need to create an item once.  See the Introduction above for further\ndiscussion.\n\nFor conciseness, these examples create their content scripts as strings and use\nthe `contentScript` property.  In your own add-ons, you will probably want to\ncreate your content scripts in separate files and pass their URLs using the\n`contentScriptFile` property.  See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html)\nfor more information.\n\nFirst, don't forget to import the module:\n\n    var contextMenu = require(\"context-menu\");\n\nShow an \"Edit Page Source\" item when the user right-clicks a non-interactive\npart of the page:\n\n    var pageSourceItem = contextMenu.Item({\n      label: \"Edit Page Source\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(document.URL);' +\n                     '});',\n      onMessage: function (pageURL) {\n        editSource(pageURL);\n      }\n    });\n\nShow an \"Edit Image\" item when the menu is invoked on an image:\n\n    var editImageItem = contextMenu.Item({\n      label: \"Edit Image\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\nShow an \"Edit Mozilla Image\" item when the menu is invoked on an image in a\nmozilla.org or mozilla.com page:\n\n    var editMozImageItem = contextMenu.Item({\n      label: \"Edit Mozilla Image\",\n      context: [\n        contextMenu.URLContext([\"*.mozilla.org\", \"*.mozilla.com\"]),\n        contextMenu.SelectorContext(\"img\")\n      ],\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\nShow an \"Edit Page Images\" item when the page contains at least one image:\n\n    var editImagesItem = contextMenu.Item({\n      label: \"Edit Page Images\",\n      // This ensures the item only appears during the page context.\n      context: contextMenu.PageContext(),\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  var pageHasImgs = !!document.querySelector(\"img\");' +\n                     '  return pageHasImgs;' +\n                     '});' +\n                     'self.on(\"click\", function (node, data) {' +\n                     '  var imgs = document.querySelectorAll(\"img\");' +\n                     '  var imgSrcs = [];' +\n                     '  for (var i = 0 ; i < imgs.length; i++)' +\n                     '    imgSrcs.push(imgs[i].src);' +\n                     '  self.postMessage(imgSrcs);' +\n                     '});',\n      onMessage: function (imgSrcs) {\n        openImageEditor(imgSrcs);\n      }\n    });\n\nShow a \"Search With\" menu when the user right-clicks an anchor that searches\nGoogle or Wikipedia with the text contained in the anchor:\n\n    var googleItem = contextMenu.Item({\n      label: \"Google\",\n      data: \"http://www.google.com/search?q=\"\n    });\n    var wikipediaItem = contextMenu.Item({\n      label: \"Wikipedia\",\n      data: \"http://en.wikipedia.org/wiki/Special:Search?search=\"\n    });\n    var searchMenu = contextMenu.Menu({\n      label: \"Search With\",\n      context: contextMenu.SelectorContext(\"a[href]\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  var searchURL = data + node.textContent;' +\n                     '  window.location.href = searchURL;' +\n                     '});',\n      items: [googleItem, wikipediaItem]\n    });\n\nDynamically set an item's label based on the number of times it's been clicked:\n\n    var numClicks = 0;\n    contextMenu.Item({\n      label: \"Click Me: \" + numClicks,\n      contentScript: 'self.on(\"click\", self.postMessage);',\n      onMessage: function () {\n        this.label = \"Click Me: \" + (++numClicks);\n      }\n    });\n\n\n"], ["api-json", {"line_number": 346, "name": "Item", "constructors": [{"line_number": 349, "name": "Item", "params": [{"line_number": 352, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 354, "required": true, "name": "label", "description": "The item's label.  It must either be a string or an object that implements\n`toString()`."}, {"datatype": "string", "line_number": 357, "required": false, "name": "data", "description": "An optional arbitrary value to associate with the item.  It must be either a\nstring or an object that implements `toString()`.  It will be passed to\nclick listeners."}, {"datatype": "value", "line_number": 361, "required": false, "name": "context", "description": "If the item is contained in the top-level context menu, this declaratively\nspecifies the context under which the item will appear; see Specifying\nContexts above.  Ignored if the item is contained in a submenu."}, {"datatype": "string,array", "line_number": 365, "required": false, "name": "contentScript", "description": "If the item is contained in the top-level context menu, this is the content\nscript or an array of content scripts that the item can use to interact with\nthe page.  Ignored if the item is contained in a submenu."}, {"datatype": "string,array", "line_number": 369, "required": false, "name": "contentScriptFile", "description": "If the item is contained in the top-level context menu, this is the local\nfile URL of the content script or an array of such URLs that the item can\nuse to interact with the page.  Ignored if the item is contained in a\nsubmenu."}, {"datatype": "function", "line_number": 374, "required": false, "name": "onMessage", "description": "If the item is contained in the top-level context menu, this function will\nbe called when the content script calls `self.postMessage`.  It will be\npassed the data that was passed to `postMessage`.  Ignored if the item is\ncontained in a submenu."}], "description": "An object with the following keys:"}], "signature": "Item(options)", "type": "constructor", "description": "Creates a labeled menu item that can perform an action when clicked."}], "events": [{"arguments": [{"datatype": "value", "line_number": 428, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/web-content.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 421, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this menu item. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the menu item's `message` event.\n"}], "methods": [{"line_number": 415, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Permanently removes the item from the top-level context menu.  If the item is\nnot contained in the top-level context menu, this method does nothing."}], "type": "class", "properties": [{"datatype": "string", "line_number": 381, "type": "property", "name": "label", "description": "The menu item's label.  You can set this after creating the item to update its\nlabel later."}, {"datatype": "string", "line_number": 387, "type": "property", "name": "data", "description": "An arbitrary value associated with the menu item during creation.  Currently\nthis property is read-only."}, {"datatype": "list", "line_number": 393, "type": "property", "name": "context", "description": "A list of declarative contexts for which the menu item will appear in the\ncontext menu.  Contexts can be added by calling `context.add()` and removed by\ncalled `context.remove()`.  This property is meaningful only for items\ncontained in the top-level context menu."}, {"datatype": "string,array", "line_number": 401, "type": "property", "name": "contentScript", "description": "The content script or the array of content scripts associated with the menu\nitem during creation.  This property is meaningful only for items contained in\nthe top-level context menu."}, {"datatype": "string,array", "line_number": 408, "type": "property", "name": "contentScriptFile", "description": "The URL of a content script or the array of such URLs associated with the menu\nitem during creation.  This property is meaningful only for items contained in\nthe top-level context menu."}], "description": "A labeled menu item that can perform an action when clicked.\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 436, "name": "Menu", "constructors": [{"line_number": 440, "name": "Menu", "params": [{"line_number": 443, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 445, "required": true, "name": "label", "description": "The item's label.  It must either be a string or an object that implements\n`toString()`."}, {"datatype": "array", "line_number": 448, "required": true, "name": "items", "description": "An array of menu items that the menu will contain.  Each must be an `Item`,\n`Menu`, or `Separator`."}, {"datatype": "value", "line_number": 451, "required": false, "name": "context", "description": "If the menu is contained in the top-level context menu, this declaratively\nspecifies the context under which the menu will appear; see Specifying\nContexts above.  Ignored if the menu is contained in a submenu."}, {"datatype": "string,array", "line_number": 455, "required": false, "name": "contentScript", "description": "If the menu is contained in the top-level context menu, this is the content\nscript or an array of content scripts that the menu can use to interact with\nthe page.  Ignored if the menu is contained in a submenu."}, {"datatype": "string,array", "line_number": 459, "required": false, "name": "contentScriptFile", "description": "If the menu is contained in the top-level context menu, this is the local\nfile URL of the content script or an array of such URLs that the menu can\nuse to interact with the page.  Ignored if the menu is contained in a\nsubmenu."}, {"datatype": "function", "line_number": 464, "required": false, "name": "onMessage", "description": "If the menu is contained in the top-level context menu, this function will\nbe called when the content script calls `self.postMessage`.  It will be\npassed the data that was passed to `postMessage`.  Ignored if the item is\ncontained in a submenu."}], "description": "An object with the following keys:"}], "signature": "Menu(options)", "type": "constructor", "description": "Creates a labeled menu item that expands into a submenu."}], "events": [{"arguments": [{"datatype": "value", "line_number": 518, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/web-content.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 511, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this menu item. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the menu item's `message` event.\n"}], "methods": [{"line_number": 505, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Permanently removes the menu from the top-level context menu.  If the menu is\nnot contained in the top-level context menu, this method does nothing."}], "type": "class", "properties": [{"datatype": "string", "line_number": 471, "type": "property", "name": "label", "description": "The menu's label.  You can set this after creating the menu to update its\nlabel later."}, {"datatype": "array", "line_number": 477, "type": "property", "name": "items", "description": "The menu items contained in the menu.  Currently the items in the menu cannot\nbe changed by modifying this property."}, {"datatype": "list", "line_number": 483, "type": "property", "name": "context", "description": "A list of declarative contexts for which the menu will appear in the context\nmenu.  Contexts can be added by calling `context.add()` and removed by called\n`context.remove()`.  This property is meaningful only for menus contained in\nthe top-level context menu."}, {"datatype": "string,array", "line_number": 491, "type": "property", "name": "contentScript", "description": "The content script or the array of content scripts associated with the menu\nduring creation.  This property is meaningful only for menus contained in the\ntop-level context menu."}, {"datatype": "string,array", "line_number": 498, "type": "property", "name": "contentScriptFile", "description": "The URL of a content script or the array of such URLs associated with the menu\nduring creation.  This property is meaningful only for menus contained in the\ntop-level context menu."}], "description": "A labeled menu item that expands into a submenu.\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 526, "constructors": [{"line_number": 530, "signature": "Separator()", "type": "constructor", "name": "Separator", "description": "Creates a menu separator."}], "type": "class", "name": "Separator", "description": "A menu separator.  Separators can be contained only in `Menu`s, not in the\ntop-level context menu."}], ["markdown", "\n\n"], ["api-json", {"line_number": 536, "constructors": [{"line_number": 538, "signature": "PageContext()", "type": "constructor", "name": "PageContext", "description": "Creates a page context.  See Specifying Contexts above."}], "type": "class", "name": "PageContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 544, "constructors": [{"line_number": 546, "signature": "SelectionContext()", "type": "constructor", "name": "SelectionContext", "description": "Creates a context that occurs when a page contains a selection.  See\nSpecifying Contexts above."}], "type": "class", "name": "SelectionContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 553, "constructors": [{"line_number": 555, "name": "SelectorContext", "params": [{"datatype": "string", "line_number": 559, "required": true, "name": "selector", "description": "A CSS selector."}], "signature": "SelectorContext(selector)", "type": "constructor", "description": "Creates a context that matches a given CSS selector.  See Specifying Contexts\nabove."}], "type": "class", "name": "SelectorContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 564, "constructors": [{"line_number": 566, "name": "URLContext", "params": [{"datatype": "string,array", "line_number": 570, "required": true, "name": "matchPattern", "description": "A [match pattern](packages/api-utils/docs/match-pattern.html) string or an array of\nmatch pattern strings."}], "signature": "URLContext(matchPattern)", "type": "constructor", "description": "Creates a context that matches pages with particular URLs.  See Specifying\nContexts above."}], "type": "class", "name": "URLContext", "description": ""}], ["markdown", "\n"]]