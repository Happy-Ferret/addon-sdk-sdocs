[["version", 4], ["markdown", "<!-- contributed by Erik Vold [erikvvold@gmail.com]  -->\n\n#### *Experimental*\n\nThe `simple-prefs` module lets you easily and persistently store preferences\nacross application restarts, which can be configured by users in the\nAdd-ons Manager.\n\nIntroduction\n------------\n\nWith the simple preferences module you can store booleans, integers, and string\nvalues.\n\n\nInline Options & Default Values\n-------------------------------\n\nIn order to have a `options.xul` (for inline options) generated, or a\n`defaults/preferences/prefs.js` for default preferences, you will need to\ndefine the preferences in your `package.json`, like so:\n\n    {\n        \"fullName\": \"Example Add-on\",\n        ...\n        \"preferences\": [{\n            \"name\": \"somePreference\",\n            \"title\": \"Some preference title\",\n            \"type\": \"string\",\n            \"value\": \"this is the default string value\"\n        }]\n    }\n\n\n"], ["api-json", {"datatype": "object", "line_number": 35, "type": "property", "name": "prefs", "description": "*experimental* A persistent object private to your add-on.  Properties with boolean,\nnumber, and string values will be persisted in the Mozilla preferences system."}], ["markdown", "\n\n\n"], ["api-json", {"line_number": 42, "name": "on", "params": [{"datatype": "String", "line_number": 55, "required": true, "name": "prefName", "description": "The name of the preference to watch for changes."}, {"datatype": "Function", "line_number": 57, "required": true, "name": "listener", "description": "The listener function that processes the event."}], "signature": "on(prefName, listener)", "type": "function", "description": "  *experimental* Registers an event `listener` that will be called when a preference is changed.\n\n**Example:**\n\n    function onPrefChange(prefName) {\n        console.log(\"The \" + prefName + \" preference changed.\");\n    }\n    require(\"simple-prefs\").on(\"somePreference\", onPrefChange);\n    require(\"simple-prefs\").on(\"someOtherPreference\", onPrefChange);\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 61, "name": "removeListener", "params": [{"datatype": "String", "line_number": 65, "required": true, "name": "prefName", "description": "The name of the preference to watch for changes."}, {"datatype": "Function", "line_number": 67, "required": true, "name": "listener", "description": "The listener function that processes the event."}], "signature": "removeListener(prefName, listener)", "type": "function", "description": "*experimental* Unregisters an event `listener` for the specified preference.\n"}], ["markdown", "\n\n"]]