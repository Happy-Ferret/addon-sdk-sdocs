[["version", 4], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com] -->\n\nThe `window-utils` module provides helpers for accessing and tracking\napplication windows.  These windows implement the [`nsIDOMWindow`][nsIDOMWindow]\ninterface.\n\n[nsIDOMWindow]: http://mxr.mozilla.org/mozilla-central/source/dom/interfaces/base/nsIDOMWindow.idl\n\n"], ["api-json", {"line_number": 9, "constructors": [{"line_number": 51, "name": "WindowTracker", "params": [{"datatype": "object", "line_number": 55, "required": true, "name": "delegate", "description": "An object that implements `onTrack()` and `onUntrack()` methods."}], "signature": "WindowTracker(delegate)", "type": "constructor", "description": "A `WindowTracker` object listens for openings and closings of application\nwindows."}], "type": "class", "name": "WindowTracker", "description": "`WindowTracker` objects make it easy to \"monkeypatch\" windows when a program is\nloaded and \"un-monkeypatch\" those windows when the program is unloaded.  For\nexample, if a Firefox add-on needs to add a status bar icon to all browser\nwindows, it can use a single `WindowTracker` object to gain access to windows\nwhen they are opened and closed and also when the add-on is loaded and unloaded.\n\nWhen a window is opened or closed, a `WindowTracker` notifies its delegate\nobject, which is passed to the constructor.  The delegate is also notified of\nall windows that are open at the time that the `WindowTracker` is created and\nall windows that are open at the time that the `WindowTracker` is unloaded.  The\ncaller can therefore use the same code to act on all windows, regardless of\nwhether they are currently open or are opened in the future, or whether they are\nclosed while the parent program is loaded or remain open when the program is\nunloaded.\n\nWhen a window is opened or when a window is open at the time that the\n`WindowTracker` is created, the delegate's `onTrack()` method is called and\npassed the window.\n\nWhen a window is closed or when a window is open at the time that the\n`WindowTracker` is unloaded, the delegate's `onUntrack()` method is called and\npassed the window.  (The `WindowTracker` is unloaded when its its `unload()`\nmethod is called, or when its parent program is unloaded, disabled, or\nuninstalled, whichever comes first.)\n\n**Example**\n\n    var delegate = {\n      onTrack: function (window) {\n        console.log(\"Tracking a window: \" + window.location);\n        // Modify the window!\n      },\n      onUntrack: function (window) {\n        console.log(\"Untracking a window: \" + window.location);\n        // Undo your modifications!\n      }\n    };\n    var winUtils = require(\"window-utils\");\n    var tracker = new winUtils.WindowTracker(delegate);\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 60, "signature": "windowIterator()", "type": "function", "name": "windowIterator", "description": "  An iterator for windows currently open in the application.\n\n**Example**\n\n    var winUtils = require(\"window-utils\");\n    for (window in winUtils.windowIterator())\n      console.log(\"An open window! \" + window.location);\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 72, "name": "closeOnUnload", "params": [{"datatype": "window", "line_number": 75, "required": true, "name": "window", "description": "The window to close."}], "signature": "closeOnUnload(window)", "type": "function", "description": "Marks an application window to be closed when the program is unloaded."}], ["markdown", "\n"]]