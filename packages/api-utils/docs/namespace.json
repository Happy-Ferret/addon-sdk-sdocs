[["version", 4], ["markdown", "Provides an API for creating namespaces for any given objects, which\neffectively may be used for creating fields that are not part of objects\npublic API.\n\n      let { Namespace } = require('api-utils/namespace');\n      let ns = Namespace();\n\n      ns(publicAPI).secret = secret;\n\nOne namespace may be used with multiple objects:\n\n      let { Namespace } = require('api-utils/namespace');\n      let dom = Namespace();\n\n      function View(element) {\n        let view = Object.create(View.prototype);\n        dom(view).element = element;\n        // ....\n      }\n      View.prototype.destroy = function destroy() {\n        let { element } = dom(this);\n        element.parentNode.removeChild(element);\n        // ...\n      };\n      // ...\n      exports.View = View;\n      // ...\n\nAlso, multiple namespaces can be used with one object:\n\n      // ./widget.js\n\n      let { Cu } = require('chrome');\n      let { Namespace } = require('api-utils/namespace');\n      let { View } = require('./view');\n\n      // Note this is completely independent from View's internal Namespace object.\n      let ns = Namespace();\n\n      function Widget(options) {\n        let { element, contentScript } = options;\n        let widget = Object.create(Widget.prototype);\n        View.call(widget, options.element);\n        ns(widget).sandbox = Cu.Sandbox(element.ownerDocument.defaultView);\n        // ...\n      }\n      Widget.prototype = Object.create(View.prototype);\n      Widget.prototype.postMessage = function postMessage(message) {\n        let { sandbox } = ns(this);\n        sandbox.postMessage(JSON.stringify(JSON.parse(message)));\n        ...\n      };\n      Widget.prototype.destroy = function destroy() {\n        View.prototype.destroy.call(this);\n        // ...\n        delete ns(this).sandbox;\n      };\n      exports.Widget = Widget;\n\nIn addition access to the namespace can be shared with other code by just\nhanding them a namespace accessor function.\n\n      let { dom } = require('./view');\n      Widget.prototype.setInnerHTML = function setInnerHTML(html) {\n        dom(this).element.innerHTML = String(html);\n      };\n"]]